// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A or C Instruction ?
    DMux(in= true, sel= instruction[15], a= isA, b= isC);
    // Should load ARegister ?
    Or(a= isA, b= instruction[5], out= loadA);
    // Should load DRegister ?
    And(a= isC, b= instruction[4], out= loadD);
    // ARegister input
    Mux16(a= aluOut, b= instruction, sel= isA, out= aIn);
    ARegister(in= aIn, load= loadA, out= aOut, out[0..14]= addressM);
    DRegister(in= aluOut, load= loadD, out= dOut);
    // Should 2nd ALU input be from A or M ?
    Mux16(a= aOut, b= inM, sel= instruction[12], out= aOrM);
    ALU(x= dOut, y= aOrM, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8],
        f= instruction[7], no= instruction[6], out= aluOut, out= outM, zr= isZero, ng= isNeg);
    And(a= isC, b= instruction[3], out= writeM);
    // Should jump if alu output is zero ?
    And(a= isZero, b= instruction[1], out= zeroJump);
    // Should jump if alu output is negative ?
    And(a= isNeg, b= instruction[2], out= negJump);
    Or(a= isZero, b= isNeg, out= notPos);
    Not(in= notPos, out= isPos);
    // Should jump if alu output is Positive ?
    And(a= isPos, b= instruction[0], out= posJump);
    Or(a= negJump, b= posJump, out= jump);
    Or(a= zeroJump, b= jump, out= shouldJump);
    // load PC based on jump decision
    And(a= shouldJump, b= isC, out= loadPC);
    PC(in= aOut, load= loadPC, inc= true, reset= reset, out[0..14]= pc);
}